/*------------------------------------------------------------------
[ENV]
-------------------------------------------------------------------*/
require('dotenv').config()
/*------------------------------------------------------------------
[End ENV]
-------------------------------------------------------------------*/

/*------------------------------------------------------------------
[Node Module]
-------------------------------------------------------------------*/
const fs = require('fs');
const http = require('http');
const https = require('https');
const express = require('express');
const helmet = require('helmet');
const compression = require('compression');
const cors = require('cors');
const toobusy = require('toobusy-js');
/*------------------------------------------------------------------
[End Node Module]
-------------------------------------------------------------------*/

/*------------------------------------------------------------------
[Config]
-------------------------------------------------------------------*/
let privateKey;
let certificate;

if(process.env.ENV_PRODUCTION == 'false'){
    privateKey  = fs.readFileSync('./https/key.pem', 'utf8');
    certificate = fs.readFileSync('./https/cert.pem', 'utf8');
}else{
    privateKey  = fs.readFileSync('./https/ssl.key', 'utf8');
    certificate = fs.readFileSync('./https/ssl.crt', 'utf8');
}

const credentials = {key: privateKey, cert: certificate};

const { port_app, port_app_ssl } = require('./config/port');

/*------------------------------------------------------------------
[End Config]
-------------------------------------------------------------------*/

/*------------------------------------------------------------------
[Node Module Use]
-------------------------------------------------------------------*/
const app = express();
/*------------------------------------------------------------------
[End Node Module Use]
-------------------------------------------------------------------*/

/*------------------------------------------------------------------
[Cross Origin]
-------------------------------------------------------------------*/
app.use(cors());
/*------------------------------------------------------------------
[End Cross Origin]
-------------------------------------------------------------------*/

/*------------------------------------------------------------------
[Helmet]
-------------------------------------------------------------------*/
app.use(helmet());
app.disable('x-powered-by');
/*------------------------------------------------------------------
[End Helmet]
-------------------------------------------------------------------*/

/*------------------------------------------------------------------
[Compression]
-------------------------------------------------------------------*/
app.use(compression());
/*------------------------------------------------------------------
[End compression]
-------------------------------------------------------------------*/

/*------------------------------------------------------------------
[Body Parser]
-------------------------------------------------------------------*/
app.use(express.urlencoded({ extended: true, limit: "50mb" }));
app.use(express.json({ limit: "50mb" }));
/*------------------------------------------------------------------
[End Body Parser]
-------------------------------------------------------------------*/

/*------------------------------------------------------------------
[Static Folder]
-------------------------------------------------------------------*/
app.use(express.static('data/product'));
/*------------------------------------------------------------------
[End Static Folder]
-------------------------------------------------------------------*/

/*------------------------------------------------------------------
[Port]
-------------------------------------------------------------------*/
const httpServer = http.createServer(app);
const httpsServer = https.createServer(credentials, app);

httpServer.listen(port_app, () => {
	console.log('------------------------------------------------------------------')
	console.log('APP PORT :', port_app)
	console.log('------------------------------------------------------------------')
});

httpsServer.listen(port_app_ssl, () => {
	console.log('------------------------------------------------------------------')
	console.log('APP PORT :', port_app_ssl)
	console.log('------------------------------------------------------------------')
});
/*------------------------------------------------------------------
[End Port]
-------------------------------------------------------------------*/

/*------------------------------------------------------------------
[Mode]
-------------------------------------------------------------------*/
if (process.env.ENV_PRODUCTION == 'true'){
	console.log('------------------------------------------------------------------')
	console.log('APP PRODUCTION')
	console.log('------------------------------------------------------------------')
}else{
	console.log('------------------------------------------------------------------')
	console.log('APP DEVELOPMENT')
	console.log('------------------------------------------------------------------')
}
/*------------------------------------------------------------------
[End Mode]
-------------------------------------------------------------------*/

if (process.env.ENV_PRODUCTION == 'false'){

/*------------------------------------------------------------------
[Routes API Dev]
-------------------------------------------------------------------*/
const api_test = require('./@api/v1.0/__test__');

app.use('/api/v1.0/test', api_test);
/*------------------------------------------------------------------
[End Routes API Dev]
-------------------------------------------------------------------*/
	
}
	
/*------------------------------------------------------------------
[Routes API V1.0]
-------------------------------------------------------------------*/
const api_login = require('./@api/v1.0/authentication/login');
const api_register = require('./@api/v1.0/authentication/register');

app.use('/api/v1.0/login', api_login);
app.use('/api/v1.0/register', api_register);

const api_user_get = require('./@api/v1.0/user/get');
const api_user_post = require('./@api/v1.0/user/post');

app.use('/api/v1.0/user/get', api_user_get);
app.use('/api/v1.0/user/post', api_user_post);

const api_product_get = require('./@api/v1.0/product/get');
const api_product_post = require('./@api/v1.0/product/post');

app.use('/api/v1.0/product/get', api_product_get);
app.use('/api/v1.0/product/post', api_product_post);
/*------------------------------------------------------------------
[End Routes API V1.0]
-------------------------------------------------------------------*/

/*------------------------------------------------------------------
[Server Busy]
-------------------------------------------------------------------*/
app.use((request, response, next) => {
    if (toobusy()) {
        // log if you see necessary
        response.send(503, "Server Too Busy");
    } else {
		next();
    }
});
/*------------------------------------------------------------------
[End Server Busy]
-------------------------------------------------------------------*/

/*------------------------------------------------------------------
[404]
-------------------------------------------------------------------*/
app.all('*', (request, response) => {
	response.send(404, "Not Found");
});
/*------------------------------------------------------------------
[End 404]
-------------------------------------------------------------------*/

/*------------------------------------------------------------------
[Error]
-------------------------------------------------------------------*/
app.use((error, request, response, next) => {
	if(error){
		console.log(error);
		return response.send('Opps');
	}
	next();
});
/*------------------------------------------------------------------
[End Error]
-------------------------------------------------------------------*/
